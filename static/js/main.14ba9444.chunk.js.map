{"version":3,"sources":["api/api.tsx","components/FilterByType/FilterByType.tsx","components/SelectedCard/SelectedCard.tsx","components/PokemonList/PokemonList.tsx","App.tsx","index.tsx"],"names":["request","loadLimit","a","fetch","response","ok","Error","status","json","getPokemonsInfo","url","pokemon","getPokemonsType","types","FilterByTypes","props","onHandleSelect","className","onChange","value","map","type","name","SelectedCard","selectedPokemon","sprites","moves","stats","weight","src","front_default","alt","join","item","stat","base_stat","length","PokemonList","useState","pokemonsData","setPokemonsData","pokemons","setPokemons","setTypes","setLoadLimit","setSelectedPokemon","isSelectedPokemon","setIsSelectedPokemon","isError","setError","loadData","pokemonsFromApi","loadPokemonsPromise","results","loadPokemon","Promise","all","loadPokemons","useEffect","loadTypes","getSelectedPokemon","event","typeName","filteredPokemons","filter","find","filteredByTypes","target","role","tabIndex","onClick","onKeyPress","id","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14ba9444.chunk.js","sourcesContent":["const API_URL = 'https://pokeapi.co/api/v2/pokemon?limit=';\nconst TYPE_URL = 'https://pokeapi.co/api/v2/type?limit=999';\n\nexport const request = async (loadLimit: number) => {\n  const response = await fetch(`${API_URL}${loadLimit}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - Something went wrong with data load`);\n  }\n\n  return response.json();\n};\n\nexport const getPokemonsInfo = async (url: string) => {\n  const pokemon = await fetch(url);\n\n  if (!pokemon.ok) {\n    throw new Error(`${pokemon.status} - Something went wrong with info load`);\n  }\n\n  return pokemon.json();\n};\n\nexport const getPokemonsType = async () => {\n  const types = await fetch(TYPE_URL);\n\n  if (!types.ok) {\n    throw new Error(`${types.status} - Something went wrong with type load`);\n  }\n\n  return types.json();\n};\n","import React from 'react';\n\ntype Props = {\n  types: Type[],\n  onHandleSelect: (event: React.ChangeEvent<HTMLSelectElement>) => void,\n};\n\nexport const FilterByTypes: React.FC<Props> = (props) => {\n  const { onHandleSelect, types } = props;\n\n  return (\n    <select className=\"form-control\" onChange={onHandleSelect}>\n      <option value=\"All\">All</option>\n      {types.map(type => (\n        <option\n          key={type.name}\n          value={type.name}\n        >\n          {type.name}\n        </option>\n      ))}\n    </select>\n  );\n};\n","import React from 'react';\n\nimport './SelectedCard.scss';\n\ntype Props = {\n  selectedPokemon: Pokemon,\n};\n\nexport const SelectedCard: React.FC<Props> = (props) => {\n  const {\n    sprites,\n    name,\n    moves,\n    stats,\n    types,\n    weight,\n  } = props.selectedPokemon;\n\n  return (\n    <div className=\"card_info\">\n      <img src={sprites.front_default} className=\"card-img-top\" alt=\"...\" />\n      <div className=\"card-body card-body--info\">\n        <h5 className=\"card-title\">{name}</h5>\n\n        <table className=\"table table-bordered card_table\">\n          <thead>\n            <tr>\n              <th>Type</th>\n              <td>{types.map(type => type.type.name).join(', ')}</td>\n            </tr>\n          </thead>\n          <tbody>\n            {stats.map(item => (\n              <tr key={item.stat.name}>\n                <th>{`${item.stat.name}`}</th>\n                <td>{`${item.base_stat}`}</td>\n              </tr>\n            ))}\n            <tr>\n              <th>Weight</th>\n              <td>{`${weight}`}</td>\n            </tr>\n            <tr>\n              <th>Total moves</th>\n              <td>{`${moves.length}`}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { request, getPokemonsInfo, getPokemonsType } from '../../api/api';\nimport { FilterByTypes } from '../FilterByType';\nimport { SelectedCard } from '../SelectedCard';\n\nimport './PokemonList.scss';\n\nexport const PokemonList: React.FC = () => {\n  const [pokemonsData, setPokemonsData] = useState<Pokemon[]>([]);\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\n  const [types, setTypes] = useState<Type[]>([]);\n  const [loadLimit, setLoadLimit] = useState(12);\n  const [selectedPokemon, setSelectedPokemon] = useState<Pokemon | null>(null);\n  const [isSelectedPokemon, setIsSelectedPokemon] = useState(false);\n  const [isError, setError] = useState(false);\n\n  const loadData = () => {\n    (async () => {\n      try {\n        const pokemonsFromApi: Api = await request(loadLimit);\n\n        const loadPokemonsPromise = pokemonsFromApi.results.map(async (pokemon: Results) => {\n          const loadPokemon = await getPokemonsInfo(pokemon.url);\n\n          return loadPokemon;\n        });\n\n        const loadPokemons: Pokemon[] = await Promise.all(loadPokemonsPromise);\n\n        setPokemonsData(loadPokemons);\n        setPokemons(loadPokemons);\n        setError(false);\n      } catch {\n        setError(true);\n      }\n    })();\n  };\n\n  useEffect(() => {\n    (async () => {\n      loadData();\n      const loadTypes: Types = await getPokemonsType();\n\n      setTypes(loadTypes.results);\n    })();\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      loadData();\n    })();\n  }, [loadLimit]);\n\n  const getSelectedPokemon = (pokemon: Pokemon) => {\n    setIsSelectedPokemon(true);\n    setSelectedPokemon(pokemon);\n  };\n\n  const filteredByTypes = (typeName: string) => {\n    setIsSelectedPokemon(false);\n\n    if (typeName === 'All') {\n      setPokemons(pokemonsData);\n\n      return;\n    }\n\n    const filteredPokemons = pokemonsData\n      .filter(pokemon => pokemon.types.find(type => type.type.name === typeName));\n\n    setPokemons(filteredPokemons);\n  };\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    filteredByTypes(event.target.value);\n  };\n\n  return (\n    <main>\n      <h1 className=\"main_title\">Pokedex</h1>\n\n      <FilterByTypes onHandleSelect={handleSelect} types={types} />\n\n      {isError ? ('Something went wrong') : (\n        <section className=\"container\">\n          <article className=\"row row-cols-1 row-cols-md-3 container_list\">\n            {pokemons.length > 0 ? (pokemons.map((pokemon: Pokemon) => {\n              return (\n                <div key={pokemon.id} className=\"col mb-4\">\n                  <div\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"card\"\n                    onClick={() => getSelectedPokemon(pokemon)}\n                    onKeyPress={() => getSelectedPokemon(pokemon)}\n                  >\n                    <img\n                      src={pokemon.sprites.front_default}\n                      className=\"card-img-top\"\n                      alt={`pokemon ${pokemon.name}`}\n                    />\n                    <div className=\"card-body\">\n                      <h5 className=\"card-title\">{pokemon.name}</h5>\n                      <div className=\"card_types\">\n                        {pokemon.types.map(type => {\n                          const { url, name } = type.type;\n\n                          return (\n                            <p key={url} className={`card_type-item card_type-item--${name}`}>\n                              {name}\n                            </p>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              );\n            })) : 'Need to load more pokemons ))'}\n\n            <button\n              className=\"btn btn-primary container_btn-loader\"\n              type=\"button\"\n              onClick={() => setLoadLimit(loadLimit + 12)}\n            >\n              Load More\n            </button>\n          </article>\n\n          <article className=\"container_info-card\">\n            {isSelectedPokemon && selectedPokemon\n              && <SelectedCard selectedPokemon={selectedPokemon} />}\n          </article>\n        </section>\n      )}\n    </main>\n  );\n};\n","import React from 'react';\nimport { PokemonList } from './components/PokemonList';\nimport './App.scss';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"starter\">\n      <PokemonList />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}