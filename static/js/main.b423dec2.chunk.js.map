{"version":3,"sources":["api/api.tsx","components/FilterByType/FilterByTypes.tsx","components/SelectedCard/SelectedCard.tsx","components/PokemonList/PokemonList.tsx","App.tsx","index.tsx"],"names":["request","loadLimit","a","fetch","response","ok","Error","status","json","getPokemonsInfo","url","pokemon","getPokemonsType","types","FilterByTypes","props","onHandleSelect","selectedType","className","id","value","onChange","map","type","name","SelectedCard","selectedPokemon","sprites","moves","stats","weight","src","front_default","alt","join","item","stat","base_stat","length","PokemonList","useState","pokemonsData","setPokemonsData","pokemons","setPokemons","setTypes","setLoadLimit","setSelectedPokemon","setSelectedType","isSelectedPokemon","setIsSelectedPokemon","isError","setError","isLoading","setLoading","loadData","pokemonsFromApi","loadPokemonsPromise","results","loadPokemon","Promise","all","loadPokemons","useEffect","loadTypes","getSelectedPokemon","event","typeName","filteredPokemons","filter","find","filteredByTypes","target","role","tabIndex","onClick","onKeyPress","aria-hidden","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b423dec2.chunk.js","sourcesContent":["const API_URL = 'https://pokeapi.co/api/v2/pokemon?limit=';\nconst TYPE_URL = 'https://pokeapi.co/api/v2/type?limit=999';\n\nexport const request = async (loadLimit: number) => {\n  const response = await fetch(`${API_URL}${loadLimit}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - Something went wrong with data load`);\n  }\n\n  return response.json();\n};\n\nexport const getPokemonsInfo = async (url: string) => {\n  const pokemon = await fetch(url);\n\n  if (!pokemon.ok) {\n    throw new Error(`${pokemon.status} - Something went wrong with info load`);\n  }\n\n  return pokemon.json();\n};\n\nexport const getPokemonsType = async () => {\n  const types = await fetch(TYPE_URL);\n\n  if (!types.ok) {\n    throw new Error(`${types.status} - Something went wrong with type load`);\n  }\n\n  return types.json();\n};\n","import React from 'react';\nimport './FilterByTypes.scss';\n\ntype Props = {\n  types: Type[],\n  selectedType: string,\n  onHandleSelect: (event: React.ChangeEvent<HTMLSelectElement>) => void,\n};\n\nexport const FilterByTypes: React.FC<Props> = (props) => {\n  const { onHandleSelect, types, selectedType } = props;\n\n  return (\n    <select\n      className=\"form-control\"\n      id=\"form-select\"\n      value={selectedType}\n      onChange={onHandleSelect}\n    >\n      <option className=\"form_options\" value=\"All\">All</option>\n      {types.map(type => (\n        <option\n          key={type.name}\n          value={type.name}\n          className=\"form_options\"\n        >\n          {type.name}\n        </option>\n      ))}\n    </select>\n  );\n};\n","import React from 'react';\n\nimport './SelectedCard.scss';\n\ntype Props = {\n  selectedPokemon: Pokemon,\n};\n\nexport const SelectedCard: React.FC<Props> = (props) => {\n  const {\n    sprites,\n    name,\n    moves,\n    stats,\n    types,\n    weight,\n  } = props.selectedPokemon;\n\n  return (\n    <div className=\"card_info\">\n      <img src={sprites.front_default} className=\"card-img-top\" alt=\"...\" />\n      <div className=\"card-body card-body--info\">\n        <h5 className=\"card-title\">{name}</h5>\n\n        <table className=\"table table-bordered card_table\">\n          <thead>\n            <tr>\n              <th>Type</th>\n              <td>{types.map(type => type.type.name).join(', ')}</td>\n            </tr>\n          </thead>\n          <tbody>\n            {stats.map(item => (\n              <tr key={item.stat.name}>\n                <th>{`${item.stat.name}`}</th>\n                <td>{`${item.base_stat}`}</td>\n              </tr>\n            ))}\n            <tr>\n              <th>Weight</th>\n              <td>{`${weight}`}</td>\n            </tr>\n            <tr>\n              <th>Total moves</th>\n              <td>{`${moves.length}`}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { request, getPokemonsInfo, getPokemonsType } from '../../api/api';\nimport { FilterByTypes } from '../FilterByType';\nimport { SelectedCard } from '../SelectedCard';\n\nimport './PokemonList.scss';\n\nexport const PokemonList: React.FC = () => {\n  const [pokemonsData, setPokemonsData] = useState<Pokemon[]>([]);\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\n  const [types, setTypes] = useState<Type[]>([]);\n  const [loadLimit, setLoadLimit] = useState(12);\n  const [selectedPokemon, setSelectedPokemon] = useState<Pokemon | null>(null);\n  const [selectedType, setSelectedType] = useState<string>('');\n  const [isSelectedPokemon, setIsSelectedPokemon] = useState(false);\n  const [isError, setError] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n\n  const loadData = () => {\n    (async () => {\n      try {\n        const pokemonsFromApi: Api = await request(loadLimit);\n\n        const loadPokemonsPromise = pokemonsFromApi.results.map(async (pokemon: Results) => {\n          const loadPokemon = await getPokemonsInfo(pokemon.url);\n\n          return loadPokemon;\n        });\n\n        const loadPokemons: Pokemon[] = await Promise.all(loadPokemonsPromise);\n\n        setPokemonsData(loadPokemons);\n        setPokemons(loadPokemons);\n        setError(false);\n        setLoading(true);\n      } catch {\n        setError(true);\n      }\n    })();\n  };\n\n  useEffect(() => {\n    (async () => {\n      loadData();\n      const loadTypes: Types = await getPokemonsType();\n\n      setTypes(loadTypes.results);\n    })();\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      loadData();\n    })();\n  }, [loadLimit]);\n\n  const getSelectedPokemon = (pokemon: Pokemon) => {\n    setIsSelectedPokemon(true);\n    setSelectedPokemon(pokemon);\n  };\n\n  const filteredByTypes = (typeName: string) => {\n    setIsSelectedPokemon(false);\n\n    if (typeName === 'All') {\n      setPokemons(pokemonsData);\n\n      return;\n    }\n\n    const filteredPokemons = pokemonsData\n      .filter(pokemon => pokemon.types.find(type => type.type.name === typeName));\n\n    setPokemons(filteredPokemons);\n  };\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    filteredByTypes(event.target.value);\n    setSelectedType(event.target.value);\n  };\n\n  const handleClick = () => {\n    setLoadLimit(loadLimit + 12);\n    setSelectedType('All');\n  };\n\n  return (\n    <main>\n      <h1 className=\"main_title\">Pokedex</h1>\n\n      <FilterByTypes\n        onHandleSelect={handleSelect}\n        selectedType={selectedType}\n        types={types}\n      />\n\n      {isError ? ('Something went wrong') : (\n        <section className=\"container\">\n          <article className=\"row row-cols-1 row-cols-md-3 container_list\">\n            {isLoading ? (\n              <>\n                {pokemons.length > 0 ? (pokemons.map((pokemon: Pokemon) => {\n                  return (\n                    <div key={pokemon.id} className=\"col mb-4\">\n                      <div\n                        role=\"button\"\n                        tabIndex={0}\n                        className=\"card\"\n                        onClick={() => getSelectedPokemon(pokemon)}\n                        onKeyPress={() => getSelectedPokemon(pokemon)}\n                      >\n                        <img\n                          src={pokemon.sprites.front_default}\n                          className=\"card-img-top\"\n                          alt={`pokemon ${pokemon.name}`}\n                        />\n                        <div className=\"card-body\">\n                          <h5 className=\"card-title\">{pokemon.name}</h5>\n                          <div className=\"card_types\">\n                            {pokemon.types.map(type => {\n                              const { url, name } = type.type;\n\n                              return (\n                                <p key={url} className={`card_type-item card_type-item--${name}`}>\n                                  {name}\n                                </p>\n                              );\n                            })}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })) : (\n                  <p className=\"container_message\">Need to load more pokemons ))</p>\n                )}\n\n                <button\n                  className=\"btn btn-primary container_btn-loader\"\n                  type=\"button\"\n                  onClick={() => handleClick()}\n                >\n                  Load More\n                </button>\n              </>\n            ) : (\n              <div className=\"container_spinner\">\n                <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n              </div>\n            )}\n          </article>\n\n          {isSelectedPokemon && selectedPokemon\n            && (\n              <article className=\"container_info-card\">\n                <SelectedCard selectedPokemon={selectedPokemon} />\n              </article>\n            )}\n        </section>\n      )}\n    </main>\n  );\n};\n","import React from 'react';\nimport { PokemonList } from './components/PokemonList';\nimport './App.scss';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"starter\">\n      <PokemonList />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}